con <- function(secondhalf,firsthalf){
paste(firsthalf,secondhalf,sep="")
}
date.links <- as.vector(sapply(links[2:length(links)],
con,
firsthalf=paste("http://www.kcna.co.jp/item/",
yr4,"/",substr(datel,1,6),"/",
sep="")))
date.links
date <- suppressWarnings(readLines(paste("http://www.kcna.co.jp/item/",yr4,"/",datel,sep="")))
# if "Spanish-speaking" press releases exist, get rid of them
if (sum(grepl(pattern = "Spanish-speaking",date))>=1) {
s.line <- grep(pattern = "Spanish-speaking",date)
eng <- date[1:s.line-1]} else{
eng <- date
}
test <- paste(eng,collapse="\n")
matched <- str_match_all(test, "<a href=\"(.*?)\"")
links <- matched[[1]][,2]
con <- function(secondhalf,firsthalf){
paste(firsthalf,secondhalf,sep="")
}
date.links <- as.vector(sapply(links[2:length(links)],
con,
firsthalf=paste("http://www.kcna.co.jp/item/",
yr4,"/",substr(datel,1,6),"/",
sep="")))
date.links
identical(readLines("http://www.kcna.co.jp/item/2012/201211/20121121-16ee.html"),character(0))
readLines("http://www.kcna.co.jp/item/2012/201211/20121121-16ee.html")
checkurl("http://www.kcna.co.jp/item/2012/201211/20121121-16ee.html")
url.exists("http://www.kcna.co.jp/item/2012/201211/20121121-16ee.html")
mysim <- function(totalsize=5000000,
nrows=1000000,
ncols=totalsize/nrows,
K=100,
func=`+`, args=1:2, funcname="plus",
plotfile="timing.pdf") {
gc(reset=TRUE)
starttime <- proc.time()
res.m <- rep(NA, K)
res.df <- rep(NA, K)
for (i in 1:K) {
if (floor(i/10) == i/10) print(i)
x <- matrix(rnorm(nrows*ncols), nrows, ncols)
y <- matrix(rnorm(nrows*ncols), nrows, ncols)
res.m[i] <- system.time({
z <- do.call(func, list(x, y)[args])
})['elapsed']
x <- as.data.frame(x)
y <- as.data.frame(y)
res.df[i] <- system.time({
z <- do.call(func, list(x, y)[args])
})['elapsed']
}
endtime <- proc.time()
pdf(plotfile)
par(mfrow=c(2,1))
hist(res.df - res.m,
main=paste(funcname, "timing differences, df - m,",
R.Version()$version.string))
hist(100 * (res.df - res.m) / res.m,
main=paste(funcname, "percent differences, 100 *",
"(data.frame - matrix) / matrix"))
dev.off()
cat("\n\nRows:", nrows, "Columns:", ncols,
"Function:", funcname, "\n")
cat("Total elapsed time:",
endtime['elapsed'] - starttime['elapsed'],
"seconds\n")
print(R.Version()$version.string)
print(summary(res.df - res.m))
return(list(res.m, res.df, starttime, endtime))
}
mysim <- function(totalsize=5000000,
nrows=1000000,
ncols=totalsize/nrows,
K=100,
func=`+`, args=1:2, funcname="plus",
plotfile="timing.pdf") {
gc(reset=TRUE)
starttime <- proc.time()
res.m <- rep(NA, K)
res.df <- rep(NA, K)
for (i in 1:K) {
if (floor(i/10) == i/10) print(i)
x <- matrix(rnorm(nrows*ncols), nrows, ncols)
y <- matrix(rnorm(nrows*ncols), nrows, ncols)
res.m[i] <- system.time({
z <- do.call(func, list(x, y)[args])
})['elapsed']
x <- as.data.frame(x)
y <- as.data.frame(y)
res.df[i] <- system.time({
z <- do.call(func, list(x, y)[args])
})['elapsed']
}
endtime <- proc.time()
pdf(plotfile)
par(mfrow=c(2,1))
hist(res.df - res.m,
main=paste(funcname, "timing differences, df - m,",
R.Version()$version.string))
hist(100 * (res.df - res.m) / res.m,
main=paste(funcname, "percent differences, 100 *",
"(data.frame - matrix) / matrix"))
dev.off()
cat("\n\nRows:", nrows, "Columns:", ncols,
"Function:", funcname, "\n")
cat("Total elapsed time:",
endtime['elapsed'] - starttime['elapsed'],
"seconds\n")
print(R.Version()$version.string)
print(summary(res.df - res.m))
return(list(res.m, res.df, starttime, endtime))
}
result.plus <- mysim(totalsize=5000000, nrows=1000000,
K=100, func=`+`, args=1:2, funcname="plus",
plotfile="timing_plus.pdf")
result.rowSums <- mysim(totalsize=5000000, nrows=1000000,
K=100, func=rowSums, args=1, funcname="rowSums",
plotfile="timing_rowSums.pdf")
names <- c("KB","CP","JD","ML","LP","MK","AS","BZ")
sample(x = names,size = length(names),replace = F)
sample(x = names,size = length(names),replace = F)
sample(x = names,size = length(names),replace = F)
names <- c("KB","CP","JD","ML","LP","MK","AS","BZ")
set.seed(237)
sample(x = names,size = length(names),replace = F)
sample(x = names,size = length(names),replace = F)
set.seed(237)
sample(x = names,size = length(names),replace = F)
sample(x = names,size = length(names),replace = F)
install.packages("stm")
box <- c(rep(5,5), rep(10,10), rep(25,25))
pick20 <- function(x){
sum(sample(x = box, size = 20, replace = F))/100
}
sums <- unlist(sapply(1:100000, pick20))
mean(sums)
var(sums)
box
5/40+10/40+25/40
5*(5/40)+10*(10/40)+25*(25/40)
5+10+25
box <- c(rep(5,5), rep(10,10), rep(25,25))
pick20 <- function(x){
sum(sample(x = box, size = 20, replace = F))
}
sums <- unlist(sapply(1:100000, pick20))
mean(sums)
box <- c(rep(5,5), rep(10,10), rep(25,25))
pick20 <- function(x){
sum(sample(x = box, size = 20, replace = T))
}
sums <- unlist(sapply(1:100000, pick20))
sums
mean(sums)
5*(5/40)+10*(10/40)+25*(25/40)
box <- c(rep(5,5), rep(10,10), rep(25,25))
pick20 <- function(x){
sum(sample(x = box, size = 20, replace = F))
}
sums <- unlist(sapply(1:100000, pick20))
sums
mean(sums)
20*(5*(5/40)+10*(10/40)+25*(25/40))
5*((5/40)*(4/39))+10*((10/40)*(9/39))+25*((25/40)*(24/39))
var(sums)
sums <- unlist(sapply(1:100000, pick20))
mean(sums)
var(sums)
d <- 5*((5/40)*(4/39))+10*((10/40)*(9/39))+25*((25/40)*(24/39))
d
5*(5/40)+10*(10/40)+25*(25/40)
20*18.75+(20*19)*d
20*18.75+(20*19)*d-(375)^2
20*(18.75^2)+(20*19)*d-(375)^2
5*(5/40)+10*(10/40)+25*(25/40)
(375)^2
20*(18.75^2)
20*(18.75^2)+(20*19)*d
d <- (5+5)*((5/40)*(4/39))+(10+10)*((10/40)*(9/39))+(25+25)*((25/40)*(24/39))
d
20*(18.75^2)+(20*19)*d-(375)^2
d <- (5^2)*((5/40)*(4/39))+(10^2)*((10/40)*(9/39))+(25^2)*((25/40)*(24/39))
d
20*(18.75^2)+(20*19)*d-(375)^2
d <- (5^2)*((5/40)*(4/39))+(10^2)*((10/40)*(9/39))+(25^2)*((25/40)*(24/39))
d
20*(18.75^2)+(20*19)*d-(375)^2
20*(18.75^2)+2*(20*19)*d-(375)^2
var(sums)
d <- (5)*((5/40)*(4/39))+(10)*((10/40)*(9/39))+(25)*((25/40)*(24/39))
d
20*(18.75^2)+2*(20*19)*d-(375)^2
d <- (10)*((5/40)*(4/39))+(20)*((10/40)*(9/39))+(50)*((25/40)*(24/39))
d
20*(18.75^2)+2*(20*19)*d-(375)^2
d <- (5*(5/40)*5*(4/39))+(10*(10/40)*10*(9/39))+(25*(25/40)*25*(24/39))
d
20*(18.75^2)+2*(20*19)*d-(375)^2
var(sums)
d <- (5+5)*((5/40)*(4/39))+
(10+10)*((10/40)*(9/39))+
(25+25)*((25/40)*(24/39))+
(5+10)*((5/40)*(10/39))+
(5+25)*((5/40)*(25/39))+
(10+25)*((10/40)*(25/39))
d
20*(18.75^2)+2*(20*19)*d-(375)^2
20*((5/4)*5^2 + (10/40)*10^2 + (25/40)*25^2)+
2*(20*19)*d-(375)^2
20*(18.75^2)+2*(20*19)*d-(375)^2
d <- (5+5)*((5/40)*(4/39))+
(10+10)*((10/40)*(9/39))+
(25+25)*((25/40)*(24/39))+
(5+10)*((5/40)*(10/39))+
(5+25)*((5/40)*(25/39))+
(10+25)*((10/40)*(25/39))
d
d <- (5+5)*((5/40)*(4/39))+
(10+10)*((10/40)*(9/39))+
(25+25)*((25/40)*(24/39))+
(5+10)*((5/40)*(10/39))+
(5+10)*((5/39)*(10/40))+
(5+25)*((5/40)*(25/39))+
(5+25)*((5/39)*(25/40))+
(10+25)*((10/40)*(25/39))+
(10+25)*((10/39)*(25/40))
d
20*(18.75^2)+2*(20*19)*d-(375)^2
d
20*(5*(5/40)+10*(10/40)+25*(25/40))
(375)^2
20*(18.75^2)+2*(20*19)*d
20*(18.75^2)+(20*19)*d-(375)^2
d
d <- (5*5)*((5/40)*(4/39))+
(10*10)*((10/40)*(9/39))+
(25*25)*((25/40)*(24/39))+
(5*10)*((5/40)*(10/39))+
(5*10)*((5/39)*(10/40))+
(5*25)*((5/40)*(25/39))+
(5*25)*((5/39)*(25/40))+
(10*25)*((10/40)*(25/39))+
(10*25)*((10/39)*(25/40))
d
20*(18.75^2)+(20*19)*d-(375)^2
var(sums)
20*(18.75^2)+2*(20*19)*d-(375)^2
20*(18.75^2)+(20*19)*d-(375)^2
d <- (5*5)*((5/40)*(4/39))+
(10*10)*((10/40)*(9/39))+
(25*25)*((25/40)*(24/39))+
(5*10)*((5/40)*(10/39)+(5/39)*(10/40))+
(5*25)*((5/40)*(25/39)+(5/39)*(25/40))+
(10*25)*((10/40)*(25/39)+(10/39)*(25/40))
d
20*(18.75^2)+(20*19)*d-(375)^2
20*(5*(5/40)^2+10*(10/40)^2+25*(25/40)^2)
20*(18.75^2)
20*(5^2*(5/40)+10^2*(10/40)+25^2*(25/40))
20*(18.75^2)
20*(5^2*(5/40)+10^2*(10/40)+25^2*(25/40))+(20*19)*d-(375)^2
sums <- unlist(sapply(1:100000, pick20))
mean(sums)
var(sums)
0.7^3
0.7^3 * 0.3^2
0.7^3 * 0.3
0.7^3 + 2 * (0.7^3 * 0.3) + 3 * (0.7^3 * 0.3^2)
1 * (0.7^3 * 0.3) + 3 * (0.7^3 * 0.3^2)
0.64141+0.19551
20*(5*(5/40)+10*(10/40)+25*(25/40))
(5*(5/40)+10*(10/40)+25*(25/40))
d <- (5*5)*((5/40)*(4/39))+
(10*10)*((10/40)*(9/39))+
(25*25)*((25/40)*(24/39))+
(5*10)*((5/40)*(10/39)+(5/39)*(10/40))+
(5*25)*((5/40)*(25/39)+(5/39)*(25/40))+
(10*25)*((10/40)*(25/39)+(10/39)*(25/40))
d
20*(5^2*(5/40)+10^2*(10/40)+25^2*(25/40))+(20*19)*d
20*(5^2*(5/40)+10^2*(10/40)+25^2*(25/40))+(20*19)*d-(375)^2
mean(sums)
var(sums)
sums <- unlist(sapply(1:100000, pick20))
mean(sums) # E(X)
var(sums) # Var(X)
Q1 <- matrix(data = c(1, 0, 0, 0, 0, 1/2, 1/2, 1/2, 1/2), nrow = 3, byrow = T)
Q1
Q1 <- matrix(data = c(1, 0, 0, 0, 0, 1/2, 1/2, 1/2, 0), nrow = 3, byrow = T)
Q1
v1 <- solve(diag(3)-Q1, rep(1,3))
dig(3)
dia(3)
diag(3)
diag(3)-Q1
Q1 <- matrix(data = c(0, 1/2, 1/2, 0), nrow = 2, byrow = T)
v1 <- solve(diag(2)-Q1, rep(1,2))
v1
Q1 <- matrix(data = c(0, 0.5, 0.5, 0,
0, 0, 0.5, 0.5,
0, 0.5, 0, 0,
0, 0, 0, 1), nrow = 2, byrow = T)
Q1
Q1 <- matrix(data = c(0, 0.5, 0.5, 0,
0, 0, 0.5, 0.5,
0, 0.5, 0, 0,
0, 0, 0, 1), nrow = 4, byrow = T)
Q1
v1 <- solve(diag(4)-Q1, rep(1,4))
Q1 <- matrix(data = c(0, 0.5, 0.5,
0, 0, 0.5,
0, 0.5, 0,), nrow = 3, byrow = T)
Q1 <- matrix(data = c(0, 0.5, 0.5,
0, 0, 0.5,
0, 0.5, 0), nrow = 3, byrow = T)
v1 <- solve(diag(3)-Q1, rep(1,3))
v1
Q1 <- matrix(data = c(0, 0.5, 0.5,
0, 0, 0,
0, 0.5, 0), nrow = 3, byrow = T)
v1 <- solve(diag(3)-Q1, rep(1,3))
v1
sample(c("H","T"), size = 100, replace = T)
paste(sample(c("H","T"), size = 100, replace = T) collapse = "")
paste(sample(c("H","T"), size = 100, replace = T), collapse = "")
help(sub)
s <- paste(sample(c("H","T"), size = 100, replace = T), collapse = "")
sub(pattern = "HH", replacement = "AB", x = s)
s
s.ht <- sub(pattern = "HT", replacement = "CD", x = s)
s.ht
which(s.hh=="B")
grep(pattern = "B",x = s.hh)
s.hh <- sub(pattern = "HH", replacement = "AB", x = s)
s.ht <- sub(pattern = "HT", replacement = "CD", x = s)
grep(pattern = "B",x = s.hh)
grepl(pattern = "B",x = s.hh)
grep(pattern = "B",x = s.hh)
s.hh
grep(pattern = "B",x = strsplit(s.hh,""))
strsplit(s.hh,"")
grep(pattern = "B",x = strsplit(s.hh,"")[[1]])
grep(pattern = "D",x = strsplit(s.ht,"")[[1]])
ct2 <- function(x){
s <- paste(sample(c("H","T"), size = 100, replace = T), collapse = "")
s.hh <- sub(pattern = "HH", replacement = "AB", x = s)
s.ht <- sub(pattern = "HT", replacement = "CD", x = s)
c(grep(pattern = "B",x = strsplit(s.hh,"")[[1]]),
grep(pattern = "D",x = strsplit(s.ht,"")[[1]]))
}
ct2()
ct2()
ct2()
ct2()
ct2()
ct2()
ct2.res <- unlist(sapply(1:100000, ct2))
head(ct2.res)
ct2.res <- unlist(lapply(1:100000, ct2))
head(ct2.res)
ct2.res <- lapply(1:100000, ct2)
head(ct2.res)
ct2.res <- matrix(lapply(1:100, ct2))
ct2.res
ct2.res <- unlist(lapply(1:100, ct2))
ct2.res
ct2.res <- data.frame(lapply(1:100, ct2))
ct2.res
ct2.res <- data.frame(sapply(1:100, ct2))
ct2.res
ct2.res <- data.frame(t(sapply(1:100, ct2)))
ct2.res
ct2.res <- data.frame(t(sapply(1:10000, ct2)))
ct2.res
mean(ct2.res[,1])
mean(ct2.res[,2])
ct2.res <- data.frame(t(sapply(1:100000, ct2)))
mean(ct2.res[,1])
mean(ct2.res[,2])
ct2.res
Q <- matrix(data(0.5, 0.5, 0, 0), nrow=3, byrow=T)
Q <- matrix(data(c(0.5, 0.5, 0, 0)), nrow=3, byrow=T)
Q <- matrix(data=c(0.5, 0.5, 0, 0), nrow=3, byrow=T)
Q <- matrix(data=c(0.5, 0.5, 0, 0), nrow=2, byrow=T)
Q
v1 <- solve(diag(2)-Q1, rep(1,2))
Q
diag(2)-Q1
diag(2)-Q
v1 <- solve(diag(2)-Q1, rep(1,2))
v1 <- solve(diag(2)-Q, rep(1,2))
v1
Q1 <- matrix(data = c(0, 0.5, 0.5,
0.5, 0, 0,
0, 0.5, 0.5), nrow = 3, byrow = T)
v1 <- solve(diag(3)-Q1, rep(1,3))
v1
mean(ct2.res[,1]) # E[tau_HH]
mean(ct2.res[,2]) # E[tau_HT]
Q1 <- matrix(data = c(0.5, 0, 0,
0.5, 0.5, 0,
0, 0.5, 0.5), nrow = 3, byrow = T)
v1 <- solve(diag(3)-Q1, rep(1,3))
v1
mean(v)
mean(v1)
mean(6+4 +6)
mean(6, 4, 6)
0.5*(0.75/(sqrt(3/4)))
0.5*(sqrt(3/4))
(1/4)*(1/2)+(1/2)*(3/4)
(1+sqrt(3))/4
((1+sqrt(3))/4)^2
t <- c(32, 100)
t <- c("AZ", 32, 100)
state <- data.frame(c("AZ", "AZ", "TX"),
c(35, 37, 50),
c(109, 97, 20))
state
names(state) <- c("FIPS","long","lat")
state
state$distance <- c()
for (i in 1:state){
state$distance[i] <- sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2)
}
i <- 1
sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2)
state[1,2]
state[1,2]-t[2]
t[2]
t <- data.frame("AZ", 32, 100)
t
names(t) <- c("FIPS","long","lat")
t
for (i in 1:state){
state$distance[i] <- sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2)
}
sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2)
test <- sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2)
class(test)
as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
for (i in 1:state){
state$distance[i] <- as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
}
as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
test <- as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
class(test)
as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
state$distance <- rep(NA, rnow(state))
state$distance <- rep(NA, nrow(state))
state
for (i in 1:state){
state$distance[i] <- as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
}
for (i in 1:nrow(state)){
state$distance[i] <- as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
}
state
for (i in 1:nrow(state)){
if (t$FIPS[1]==state$FIPS[i]){
state$distance[i] <- as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
} else {
state$distance[i] <- NA
}
}
t$FIPS[1]==state$FIPS[i]
t$FIPS
state$FIPS[1]
as.character(t$FIPS[1])==as.character(state$FIPS[i])
for (i in 1:nrow(state)){
if (as.character(t$FIPS[1])==as.character(state$FIPS[i])){
state$distance[i] <- as.numeric(sqrt((state[i,2]-t[2])^2+(state[i,3]-t[3])^2))
} else {
state$distance[i] <- NA
}
}
d
state
setwd("~/Dropbox/artchallenge/data")
library(png)
img <- readPNG("~/Dropbox/artchallenge/data/message3.png")
dim(img)
img[1,1]
img[1,1,]
img[1,2,]
image[,,4]
image[ , ,4]
img[,4]
img[.,4]
img[,,4]
layer4 <- as.data.frame(img[,,4])
layer4 <- as.matrix(img[,,4])
layer4[1:100,1:5]
layer1 <- as.matrix(img[,,1])
dim(layer1)
head(layer1)
plot(layer1)
map(layer1)
write.csv(as.matrix(img[,,1]), header=FALSE, row.names=FALSE)
write.csv(as.matrix(img[,,1]), "layer1.csv", header=FALSE, row.names=FALSE)
write.csv(as.matrix(img[,,1]), "layer1.csv", col.names=FALSE, row.names=FALSE)
write.csv(as.matrix(img[,,2]), "layer2.csv", row.names=FALSE)
write.csv(as.matrix(img[,,3]), "layer3.csv", row.names=FALSE)
dim(layer1)
plot(c(layer1))
map(as.matrix(img[,,2]))
write.table(as.matrix(img[,,1]), "layer1.csv", sep = ","
row.names=FALSE, col.names = FALSE)
